[gd_scene load_steps=49 format=2]

[ext_resource path="res://Scenes/StylizedWaterfall/Model/WaterFall.obj" type="ArrayMesh" id=1]
[ext_resource path="res://Scenes/StylizedWaterfall/Textures/StylizedRockWall.png" type="Texture" id=2]
[ext_resource path="res://Scenes/StylizedWaterfall/Textures/StylizedSandTexture.png" type="Texture" id=3]
[ext_resource path="res://Scenes/StylizedWaterfall/Textures/WaterImpact.png" type="Texture" id=4]
[ext_resource path="res://Scenes/StylizedWaterfall/Textures/waterfog_transparent.png" type="Texture" id=5]

[sub_resource type="Shader" id=1]
code = "shader_type spatial;
render_mode cull_disabled;
uniform vec4 water_color:hint_color;
uniform float color_intensity:hint_range(0.01,10,0.01) = 1.0;
uniform float color_saturation:hint_range(0.0,1,0.01) = 0.0;
uniform float water_speed:hint_range(0.01,10,0.01) = 0.2;
uniform float stylize_amount:hint_range(0.01,5,0.01) = 1.0;
uniform float ripple_amp:hint_range(0.01,10,0.01) = 0.5;
uniform float ripple_res:hint_range(0.01,10,0.01) = 3;
uniform float ripple_speed:hint_range(0,10,0.01) = 1.0;
uniform float ripple_ring_size:hint_range(0.01,2,0.01) = 0.01;

uniform sampler2D water_layer1;
uniform sampler2D water_layer2;

void vertex() {
	float z = sqrt(VERTEX.x * (VERTEX.x*ripple_ring_size) + VERTEX.z * (VERTEX.z * ripple_ring_size));
 	float s = ripple_amp * sin(z * ripple_res - TIME * ripple_speed) / z;
	s = clamp(s,-0.1,0.1);
	VERTEX.y = s;
}
float stylize_water(float val)
{
	val = val * stylize_amount;
	if(val < -0.0 && val >= -0.2) return -0.01;
	if(val < -0.2 && val >= -0.35) return -0.07;
	if(val < -0.35 && val >= -1.0) return -0.12;
	if(val > 0.0 && val <= 0.15) return 0.2;
	if(val > 0.15 && val <= 0.35) return 0.3;
	if(val > 0.35 && val <= 0.5) return 0.5;
	if(val > 0.5 && val <= 1.0) return 0.8;
	return 1.0;
}
float animate_water(vec2 uv)
{
	float water_tex1 = texture(water_layer1, vec2(uv.x,uv.y - TIME * 0.08 * water_speed)).r;
	float water_tex2 = texture(water_layer2, vec2(uv.x,uv.y - TIME * 0.05 * water_speed)).r;
	return (water_tex1 + water_tex2) - 1.0;
}
void fragment() {
	float animated_water = animate_water(UV);
	float stylized = stylize_water(animated_water);
	vec4 color = stylized + water_color;
	ALPHA = 0.5;
	vec4 screen_tex = texture(SCREEN_TEXTURE,SCREEN_UV);
	ALBEDO = mix(screen_tex.rgb, color.rgb * color_intensity,water_color.a);
	ALBEDO -= vec3(color_saturation,color_saturation,color_saturation);
}"

[sub_resource type="OpenSimplexNoise" id=2]

[sub_resource type="NoiseTexture" id=3]
width = 1024
seamless = true
noise = SubResource( 2 )

[sub_resource type="OpenSimplexNoise" id=4]

[sub_resource type="NoiseTexture" id=5]
seamless = true
noise = SubResource( 4 )

[sub_resource type="ShaderMaterial" id=6]
shader = SubResource( 1 )
shader_param/water_color = Color( 0.101961, 0.368627, 0.913725, 0.294118 )
shader_param/color_intensity = 4.31
shader_param/color_saturation = 0.1
shader_param/water_speed = 0.1
shader_param/stylize_amount = 2.85
shader_param/ripple_amp = 0.1
shader_param/ripple_res = 7.26
shader_param/ripple_speed = 1.72
shader_param/ripple_ring_size = 0.59
shader_param/water_layer1 = SubResource( 3 )
shader_param/water_layer2 = SubResource( 5 )

[sub_resource type="PlaneMesh" id=7]
material = SubResource( 6 )
size = Vector2( 10, 10 )
subdivide_width = 64
subdivide_depth = 64

[sub_resource type="Shader" id=8]
code = "shader_type spatial;
render_mode cull_disabled;
uniform vec4 water_color:hint_color;
uniform float color_intesity:hint_range(0.01,10,0.01) = 1.0;
uniform float color_saturation:hint_range(0.01,1,0.01) = 0.0;
uniform float stylize_amount:hint_range(0,5,0.01) = 1.0;
uniform float stretch_y = 4;
uniform float water_speed:hint_range(0.01,10,0.01) = 3.0;

uniform vec4 foam_color:hint_color;
uniform float foam_range:hint_range(0.9,0.99,0.01) = 0.9;
uniform float foam_amount = 0.02;

uniform float foam_edge_scale = 0.6;
uniform float foam_near = 0.2;
uniform float foam_far = 500;

uniform sampler2D water_layer1;
uniform sampler2D water_layer2;
uniform sampler2D foam_map;

float animate_waterfall(vec2 uv)
{
	float water_tex1 = texture(water_layer1, vec2(uv.x,uv.y/stretch_y - TIME * 0.08 * water_speed)).r;
	float water_tex2 = texture(water_layer2, vec2(uv.x,uv.y/stretch_y - TIME * 0.05 * water_speed)).r;
	return (water_tex1 + water_tex2) - 1.0;
}
float stylize_water(float val)
{
	val = val * stylize_amount;
	if(val < -0.0 && val >= -0.2) return -0.01;
	if(val < -0.2 && val >= -0.35) return -0.07;
	if(val < -0.35 && val >= -1.0) return -0.12;
	if(val > 0.0 && val <= 0.15) return 0.2;
	if(val > 0.15 && val <= 0.35) return 0.3;
	if(val > 0.35 && val <= 0.5) return 0.5;
	if(val > 0.5 && val <= 1.0) return 0.8;
	return 1.0;
}

vec2 add_water_foam_line(vec2 uv) {
	vec2 displ = texture(water_layer2, uv - TIME / 8.0).rg;
	return ((displ * 2.0) -1.0) * foam_amount;	
}

float linearize(float depth, float z_near, float z_far) {
	// Convert the exponential depth to a linear value	
	depth = 2f * depth - 1f;
	return z_near * z_far / (z_far + depth * (z_near - z_far));
}
float foam_edge(sampler2D depth_texture, float time, vec2 screen_uv, float fragcoord_z){
	float z_depth = linearize(texture(depth_texture, screen_uv).x, foam_near, foam_far);
	float z_pos = linearize(fragcoord_z, foam_near, foam_far);
	return z_depth - z_pos;
}
float animate_foam(vec2 uv, float time) {
	vec2 displ = texture(foam_map, vec2(uv.x,uv.y - TIME * 0.04 * water_speed)).gb;
	// convert the displacement to value range -1 and 1
	displ = ((displ * 2.0) -1.0) *0.5;
	return displ.x *1.5;
}

void fragment() {
	float animated_water = animate_waterfall(UV);
	float stylized = stylize_water(animated_water);
	vec2 foam_line = add_water_foam_line(UV);
	vec4 color = vec4(stylized,stylized,stylized,1.0);
	
		// Foam / Shoreline
	float foam = foam_edge(DEPTH_TEXTURE, TIME, SCREEN_UV, FRAGCOORD.z);
	float foam_anim = animate_foam(UV, TIME);
	foam += foam_anim;
	color = mix(foam_color * 5.0, color, step(foam_edge_scale, foam));	
	
	color = mix(foam_color * 4.0, color, step(UV.y - foam_line.y, foam_range));
	if(UV.x <= 0.01 || UV.x > 0.99) {
		color += vec4(1,1,1,1) * 0.5;
	}
	
	vec4 screen_tex = texture(SCREEN_TEXTURE,SCREEN_UV);
	ALBEDO = color.rgb + mix(screen_tex.rgb, water_color.rgb * color_intesity, water_color.a);
	ALBEDO -= vec3(color_saturation,color_saturation,color_saturation);
}"

[sub_resource type="OpenSimplexNoise" id=15]
period = 131.5
persistence = 0.797
lacunarity = 1.92

[sub_resource type="NoiseTexture" id=16]
width = 1024
seamless = true
noise = SubResource( 15 )

[sub_resource type="OpenSimplexNoise" id=9]

[sub_resource type="NoiseTexture" id=10]
width = 256
seamless = true
noise = SubResource( 9 )

[sub_resource type="OpenSimplexNoise" id=11]

[sub_resource type="NoiseTexture" id=12]
seamless = true
noise = SubResource( 11 )

[sub_resource type="ShaderMaterial" id=13]
shader = SubResource( 8 )
shader_param/water_color = Color( 0.0588235, 0.101961, 0.901961, 0.0705882 )
shader_param/color_intesity = 5.9
shader_param/color_saturation = 0.0
shader_param/stylize_amount = 1.0
shader_param/stretch_y = 4.0
shader_param/water_speed = 4.0
shader_param/foam_color = Color( 1, 1, 1, 1 )
shader_param/foam_range = 0.96
shader_param/foam_amount = 0.07
shader_param/foam_edge_scale = 0.35
shader_param/foam_near = 0.25
shader_param/foam_far = 500.0
shader_param/water_layer1 = SubResource( 10 )
shader_param/water_layer2 = SubResource( 12 )
shader_param/foam_map = SubResource( 16 )

[sub_resource type="SphereMesh" id=14]
radius = 0.5
height = 1.0

[sub_resource type="SpatialMaterial" id=17]
albedo_texture = ExtResource( 2 )

[sub_resource type="Shader" id=18]
code = "shader_type spatial;

uniform sampler2D tex;
uniform sampler2D deform;

void vertex() {
	float d = texture(deform,UV - TIME * 0.04).r;
	VERTEX.y = d;
}

void fragment() {
	vec4 sandtex = texture(tex, UV);
	ALBEDO = sandtex.rgb;
}"

[sub_resource type="OpenSimplexNoise" id=19]

[sub_resource type="NoiseTexture" id=20]
seamless = true
noise = SubResource( 19 )

[sub_resource type="ShaderMaterial" id=21]
shader = SubResource( 18 )
shader_param/tex = ExtResource( 3 )
shader_param/deform = SubResource( 20 )

[sub_resource type="PlaneMesh" id=22]
material = SubResource( 21 )
size = Vector2( 5, 5 )
subdivide_width = 30
subdivide_depth = 30

[sub_resource type="Gradient" id=23]
offsets = PoolRealArray( 0, 0.524, 1 )
colors = PoolColorArray( 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 0 )

[sub_resource type="GradientTexture" id=24]
gradient = SubResource( 23 )

[sub_resource type="ParticlesMaterial" id=25]
render_priority = 11
lifetime_randomness = 0.12
emission_shape = 5
emission_ring_radius = 0.2
emission_ring_inner_radius = 1.5
emission_ring_height = 0.1
emission_ring_axis = Vector3( 0, -60, 1 )
flag_align_y = true
flag_rotate_y = true
gravity = Vector3( 0, 5, 0 )
tangential_accel = 13.92
tangential_accel_random = 0.71
color_ramp = SubResource( 24 )

[sub_resource type="SpatialMaterial" id=26]
render_priority = 10
flags_transparent = true
flags_vertex_lighting = true
vertex_color_use_as_albedo = true
params_diffuse_mode = 4
params_blend_mode = 1
params_cull_mode = 2
params_billboard_mode = 3
params_use_alpha_scissor = true
params_alpha_scissor_threshold = 0.28
particles_anim_h_frames = 1
particles_anim_v_frames = 1
particles_anim_loop = false
albedo_texture = ExtResource( 5 )

[sub_resource type="QuadMesh" id=27]
material = SubResource( 26 )
size = Vector2( 3, 4 )

[sub_resource type="Gradient" id=28]
offsets = PoolRealArray( 0, 0.512, 1 )
colors = PoolColorArray( 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 0 )

[sub_resource type="GradientTexture" id=29]
gradient = SubResource( 28 )

[sub_resource type="Curve" id=30]
max_value = 2.0
_data = [ Vector2( 0, 0 ), 0.0, 0.0, 0, 0, Vector2( 1, 1.59509 ), 0.0, 0.0, 0, 0 ]

[sub_resource type="CurveTexture" id=31]
curve = SubResource( 30 )

[sub_resource type="ParticlesMaterial" id=32]
render_priority = 12
flag_rotate_y = true
gravity = Vector3( 0, 0, 0 )
angle = -37.4
angle_random = 0.63
scale = 1.8
scale_random = 0.19
scale_curve = SubResource( 31 )
color_ramp = SubResource( 29 )

[sub_resource type="SpatialMaterial" id=33]
flags_transparent = true
vertex_color_use_as_albedo = true
params_blend_mode = 1
albedo_texture = ExtResource( 4 )
emission_enabled = true
emission = Color( 1, 1, 1, 1 )
emission_energy = 1.0
emission_operator = 0
emission_on_uv2 = false

[sub_resource type="PlaneMesh" id=34]
material = SubResource( 33 )

[sub_resource type="SpatialMaterial" id=35]
albedo_texture = ExtResource( 2 )

[sub_resource type="CapsuleMesh" id=36]
material = SubResource( 35 )
radius = 0.2
radial_segments = 17

[sub_resource type="Shader" id=37]
code = "shader_type spatial;

uniform sampler2D tex;
uniform sampler2D deform;
uniform sampler2D normalmap;

void vertex() {
	float d = texture(deform,UV).r;
	VERTEX.y = d;
}

void fragment() {
	vec4 sandtex = texture(tex, UV);
	vec4 normal_map = texture(normalmap,UV);
	NORMALMAP = normal_map.rgb;
	ALBEDO = sandtex.rgb;
}"

[sub_resource type="OpenSimplexNoise" id=38]

[sub_resource type="NoiseTexture" id=39]
width = 1024
seamless = true
noise = SubResource( 38 )

[sub_resource type="OpenSimplexNoise" id=40]

[sub_resource type="NoiseTexture" id=41]
width = 1024
seamless = true
noise = SubResource( 40 )

[sub_resource type="ShaderMaterial" id=42]
shader = SubResource( 37 )
shader_param/tex = ExtResource( 2 )
shader_param/deform = SubResource( 39 )
shader_param/normalmap = SubResource( 41 )

[sub_resource type="PlaneMesh" id=43]
material = SubResource( 42 )
size = Vector2( 5, 5 )
subdivide_width = 30
subdivide_depth = 30

[node name="StylizedWaterfall" type="Spatial"]

[node name="Water" type="MeshInstance" parent="."]
mesh = SubResource( 7 )
material/0 = null

[node name="BottomWaterfall" type="Spatial" parent="."]

[node name="WaterFall" type="MeshInstance" parent="BottomWaterfall"]
transform = Transform( 1, 0, 0, 0, 1, 0, 0, 0, 1, -0.0275335, 0.0308588, 0.167023 )
mesh = ExtResource( 1 )
skeleton = NodePath("../..")
material/0 = SubResource( 13 )

[node name="RockOrb" type="MeshInstance" parent="BottomWaterfall"]
transform = Transform( 1, 0, 0, 0, 1, 0, 0, 0, 1, 0, 1.82335, -0.174247 )
mesh = SubResource( 14 )
skeleton = NodePath("../..")
material/0 = SubResource( 17 )

[node name="SandFloor" type="MeshInstance" parent="BottomWaterfall"]
transform = Transform( 1, 0, 0, 0, 1, 0, 0, 0, 1, -2.47538, -0.800797, 2.47538 )
mesh = SubResource( 22 )
skeleton = NodePath("../..")
material/0 = null

[node name="SandFloor2" type="MeshInstance" parent="BottomWaterfall"]
transform = Transform( 1, 0, 0, 0, 1, 0, 0, 0, 1, 2.52462, -0.800797, 2.47538 )
mesh = SubResource( 22 )
skeleton = NodePath("../..")
material/0 = null

[node name="SandFloor3" type="MeshInstance" parent="BottomWaterfall"]
transform = Transform( 1, 0, 0, 0, 1, 0, 0, 0, 1, -2.47538, -0.800797, -2.52462 )
mesh = SubResource( 22 )
skeleton = NodePath("../..")
material/0 = null

[node name="SandFloor4" type="MeshInstance" parent="BottomWaterfall"]
transform = Transform( 1, 0, 0, 0, 1, 0, 0, 0, 1, 2.52462, -0.800797, -2.52462 )
mesh = SubResource( 22 )
skeleton = NodePath("../..")
material/0 = null

[node name="WaterMist" type="Particles" parent="BottomWaterfall"]
transform = Transform( 0.636886, 0, 0, 0, 1, 0, 0, 0, 0.380699, 0, 0.656417, -0.147022 )
amount = 150
lifetime = 0.2
preprocess = 6.89
speed_scale = 0.1
randomness = 0.8
process_material = SubResource( 25 )
draw_pass_1 = SubResource( 27 )

[node name="WaterFoam" type="Particles" parent="BottomWaterfall"]
lifetime = 1.86
speed_scale = 0.1
process_material = SubResource( 32 )
draw_pass_1 = SubResource( 34 )

[node name="RockForTopFoam" type="MeshInstance" parent="BottomWaterfall"]
transform = Transform( -5.80487e-08, 0, -1.851, 0, 1.129, 0, 1.328, 0, -8.09098e-08, 0, 3.77013, -0.346479 )
mesh = SubResource( 36 )
skeleton = NodePath("../..")
material/0 = null

[node name="RockWall3" type="MeshInstance" parent="BottomWaterfall"]
transform = Transform( 1, 0, 0, 0, -2.84124e-08, -1, 0, 0.65, -4.37114e-08, -2.50578, 0.541303, -1 )
mesh = SubResource( 43 )
skeleton = NodePath("../..")
material/0 = null

[node name="RockWall4" type="MeshInstance" parent="BottomWaterfall"]
transform = Transform( 1, 0, 0, 0, -2.84124e-08, -1, 0, 0.65, -4.37114e-08, 2.49422, 0.541303, -1 )
mesh = SubResource( 43 )
skeleton = NodePath("../..")
material/0 = null

[node name="TopWaterFall" type="Spatial" parent="."]

[node name="RockForTopFoam2" type="MeshInstance" parent="TopWaterFall"]
transform = Transform( -5.80487e-08, 0, -1.851, 0, 1.129, 0, 1.328, 0, -8.09098e-08, 0, 7.76531, -0.65456 )
mesh = SubResource( 36 )
skeleton = NodePath("../..")
material/0 = null

[node name="RockWall" type="MeshInstance" parent="TopWaterFall"]
transform = Transform( 1, 0, 0, 0, -2.84124e-08, -1, 0, 0.65, -4.37114e-08, -2.50578, 5.5413, -1 )
mesh = SubResource( 43 )
skeleton = NodePath("../..")
material/0 = null

[node name="RockWall2" type="MeshInstance" parent="TopWaterFall"]
transform = Transform( 1, 0, 0, 0, -2.84124e-08, -1, 0, 0.65, -4.37114e-08, 2.49422, 5.5413, -1 )
mesh = SubResource( 43 )
skeleton = NodePath("../..")
material/0 = null

[node name="WaterFall2" type="MeshInstance" parent="TopWaterFall"]
transform = Transform( 1, 0, 0, 0, 1, 0, 0, 0, 1, 0, 4.00262, -0.240315 )
mesh = ExtResource( 1 )
skeleton = NodePath("../..")
material/0 = SubResource( 13 )
